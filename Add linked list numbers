#include <iostream>
using namespace std;

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(nullptr) {}
};

// Function to add two numbers represented by linked lists
ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    ListNode* dummy = new ListNode(0);  // Dummy node to simplify code
    ListNode* p = l1, *q = l2, *current = dummy;
    int carry = 0;
    
    while (p != nullptr || q != nullptr || carry) {
        int sum = carry;
        if (p != nullptr) {
            sum += p->val;
            p = p->next;
        }
        if (q != nullptr) {
            sum += q->val;
            q = q->next;
        }
        
        carry = sum / 10;  // Compute carry for next position
        current->next = new ListNode(sum % 10);  // Create new node with the digit
        current = current->next;  // Move to next node
    }
    
    ListNode* result = dummy->next;  // The result is the next node of dummy
    delete dummy;  // Clean up dummy node
    return result;
}

// Function to print the linked list
void printList(ListNode* head) {
    while (head) {
        cout << head->val;
        if (head->next) cout << " -> ";
        head = head->next;
    }
    cout << endl;
}

// Function to delete the linked list and free memory
void deleteList(ListNode* head) {
    while (head) {
        ListNode* temp = head;
        head = head->next;
        delete temp;
    }
}

int main() {
    // Example linked list 1: 2 -> 4 -> 3 (represents 342)
    ListNode* l1 = new ListNode(2);
    l1->next = new ListNode(4);
    l1->next->next = new ListNode(3);
    
    // Example linked list 2: 5 -> 6 -> 4 (represents 465)
    ListNode* l2 = new ListNode(5);
    l2->next = new ListNode(6);
    l2->next->next = new ListNode(4);
    
    // Add the two numbers
    ListNode* result = addTwoNumbers(l1, l2);
    
    // Print the result
    cout << "Result of addition: ";
    printList(result);
    
    // Clean up memory
    deleteList(l1);
    deleteList(l2);
    deleteList(result);
    
    return 0;
}
Time Complexity: 
𝑂
(
𝑛
+
𝑚
)
O(n+m), where 
𝑛
n and 
𝑚
m are the lengths of the two linked lists. This is because each list is traversed once.
Space Complexity: 
𝑂
(
max
⁡
(
𝑛
,
𝑚
)
)
O(max(n,m)) for the result linked list.

