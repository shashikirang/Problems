#include <iostream>

using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

// Function to merge two binary trees
TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
    if (!t1) return t2;
    if (!t2) return t1;

    // Create a new node with the sum of the two nodes' values
    TreeNode* merged = new TreeNode(t1->val + t2->val);
    
    // Recursively merge the left and right children
    merged->left = mergeTrees(t1->left, t2->left);
    merged->right = mergeTrees(t1->right, t2->right);
    
    return merged;
}

// Function to print the tree in in-order traversal
void printInOrder(TreeNode* root) {
    if (!root) return;
    printInOrder(root->left);
    cout << root->val << " ";
    printInOrder(root->right);
}

// Function to delete the binary tree and free memory
void deleteTree(TreeNode* root) {
    if (!root) return;
    deleteTree(root->left);
    deleteTree(root->right);
    delete root;
}

int main() {
    // Create two sample binary trees:
    // Tree 1:        1             Tree 2:        2
    //               / \                        / \
    //              3   2                      1   3
    //             /                              \   \
    //            5                                4   7

    TreeNode* t1 = new TreeNode(1);
    t1->left = new TreeNode(3);
    t1->right = new TreeNode(2);
    t1->left->left = new TreeNode(5);

    TreeNode* t2 = new TreeNode(2);
    t2->left = new TreeNode(1);
    t2->right = new TreeNode(3);
    t2->left->right = new TreeNode(4);
    t2->right->right = new TreeNode(7);

    // Merge the trees
    TreeNode* mergedTree = mergeTrees(t1, t2);

    // Print the merged tree
    cout << "In-order traversal of merged tree: ";
    printInOrder(mergedTree);
    cout << endl;

    // Clean up memory
    deleteTree(mergedTree);

    return 0;
}

Time Complexity: 
O(N), where N is the number of nodes in the larger tree. Each node in both trees is visited exactly once.
Space Complexity: 
O(N) due to the recursion stack and the space needed for the new merged tree.




If you want to merge two binary trees iteratively rather than using recursion, you can use a level-order traversal approach. This approach involves using a queue to process nodes in a breadth-first manner. Hereâ€™s how you can achieve this in C++:

Iterative Approach
Use a Queue: Utilize a queue to keep track of nodes to be processed.
Process Nodes: For each node pair from the two trees, create a new node with the sum of their values and push their children to the queue for further processing.
