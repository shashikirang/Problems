To merge overlapping intervals, you can follow a systematic approach that involves sorting the intervals and then iterating through them to merge any that overlap. Hereâ€™s how you can achieve this in C++:Approach
Sort the Intervals: Start by sorting the intervals based on their starting points. If two intervals have the same starting point, they will be sorted by their ending points.
Iterate and Merge: Traverse the sorted intervals and merge them if they overlap. Maintain a list of merged intervals.
Steps
Sort the intervals by their starting point.
Iterate through the sorted intervals and merge them as needed:
If the current interval starts after the end of the last merged interval, add it as a new merged interval.
If the current interval overlaps with the last merged interval, update the end of the last merged interval to be the maximum of its own end and the end of the current interval.

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Definition for an interval.
struct Interval {
    int start;
    int end;
    Interval(int s, int e) : start(s), end(e) {}
};

// Function to merge overlapping intervals
vector<Interval> mergeIntervals(vector<Interval>& intervals) {
    if (intervals.empty()) return {};

    // Sort intervals by starting time
    sort(intervals.begin(), intervals.end(), [](const Interval& a, const Interval& b) {
        return a.start < b.start;
    });

    vector<Interval> merged;
    
    for (const Interval& interval : intervals) {
        // If the list of merged intervals is empty or there's no overlap, add the interval
        if (merged.empty() || merged.back().end < interval.start) {
            merged.push_back(interval);
        } else {
            // Merge the current interval with the last interval in merged list
            merged.back().end = max(merged.back().end, interval.end);
        }
    }
    
    return merged;
}

// Function to print the intervals
void printIntervals(const vector<Interval>& intervals) {
    for (const Interval& interval : intervals) {
        cout << "[" << interval.start << ", " << interval.end << "] ";
    }
    cout << endl;
}

int main() {
    // Create a vector of intervals
    vector<Interval> intervals = {
        Interval(1, 3),
        Interval(2, 6),
        Interval(8, 10),
        Interval(15, 18)
    };

    // Merge the intervals
    vector<Interval> mergedIntervals = mergeIntervals(intervals);

    // Print the merged intervals
    printIntervals(mergedIntervals);

    return 0;
}

Input:
1. [1, 3]
2. [2, 6]
3. [8, 10]
4. [15, 18]

Output:

[1, 6] [8, 10] [15, 18]

Complexity Analysis
Time Complexity: 
O(nlogn), where n is the number of intervals. This is due to the sorting step. The merging step itself is 
O(n).
Space Complexity: 
O(n) for storing the merged intervals.
